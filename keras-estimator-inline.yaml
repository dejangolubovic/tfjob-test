apiVersion: "kubeflow.org/v1alpha3"
kind: Experiment
metadata:
  namespace: dejan-golubovic
  name: inline99
spec:
  parallelTrialCount: 1
  maxTrialCount: 3
  maxFailedTrialCount: 1
  objective:
    type: minimize
    goal: 0
    objectiveMetricName: loss
  algorithm:
    algorithmName: random
  metricsCollectorSpec:
    source:
      fileSystemPath:
        path: /tmp/model_outputs/eval
        kind: Directory
    collector:
      kind: TensorFlowEvent
  parameters:
    - name: --learning_rate
      parameterType: double
      feasibleSpace:
        min: "0.01"
        max: "0.05"
  trialTemplate:
    goTemplate:
        rawTemplate: |-
          apiVersion: "kubeflow.org/v1"
          kind: TFJob
          metadata:
            name: {{.Trial}}
            namespace: {{.NameSpace}}
          spec:
           tfReplicaSpecs:
            Chief:
              replicas: 1 
              restartPolicy: OnFailure
              template:
                spec:
                  containers:
                    - name: tensorflow 
                      image: registry.hub.docker.com/dejangolubovic/tfjob-test
                      imagePullPolicy: Always
                      command:
                        - "python"
                        - "-c \"import tensorflow as tf\nimport random\nimport numpy as np\nimport tempfile\nimport os, json\nimport tensorflow_datasets as tfds\nimport argparse\n\nstrategy = tf.distribute.experimental.MultiWorkerMirroredStrategy(tf.distribute.experimental.CollectiveCommunication.NCCL)\n\nwith strategy.scope():\n    config = tf.estimator.RunConfig(train_distribute=strategy, eval_distribute=strategy)\n    \n    parser = argparse.ArgumentParser()\n    parser.add_argument('--learning_rate', type=float, default=0.001, help='Initial learning rate')\n    FLAGS, unparsed = parser.parse_known_args()\n    print('FLAGS:')\n    print(FLAGS)\n    \n    model = tf.keras.models.Sequential([\n        tf.keras.layers.Dense(2048, activation='relu', input_shape=(4,)),\n        tf.keras.layers.Dense(1024),\n        tf.keras.layers.Dense(512),\n        tf.keras.layers.Dense(256),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(3)\n    ])\n    model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), optimizer=tf.keras.optimizers.Adam(FLAGS.learning_rate))\n    #model.summary()\n\n    def input_fn():\n        split = tfds.Split.TRAIN\n        dataset = tfds.load('iris', split=split, as_supervised=True)\n        dataset = dataset.map(lambda features, labels: ({'dense_input':features}, labels))\n        dataset = dataset.batch(32).repeat()\n        return dataset\n\n    os.system('mkdir /tmp/model_outputs')\n    model_dir = '/tmp/model_outputs'\n    keras_estimator = tf.keras.estimator.model_to_estimator(keras_model=model, model_dir=model_dir)\n\n    print('Training...')\n    train_result = keras_estimator.train(input_fn=input_fn, steps=100)\n    print('Train result: {}'.format(train_result))\n    print('Evaluating...')\n    eval_result = keras_estimator.evaluate(input_fn=input_fn, steps=100)\n    print('Eval result: {}'.format(eval_result))\""
                        {{- with .HyperParameters}}
                        {{- range .}}
                        - "{{.Name}}={{.Value}}"
                        {{- end}}
                        {{- end}}
